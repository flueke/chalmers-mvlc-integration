{
    "DAQConfig": {
        "enabled": true,
        "events": [
            {
                "enabled": true,
                "id": "{7119307f-abf5-4433-b85e-a90e82cf28f1}",
                "irqLevel": 4,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{7c5ad14e-eb77-4589-852e-c5097234432c}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{02e3f012-58d8-4de3-946c-d9a619aa9023}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "# TRIVA registers:\n# - Status Register     02000000 (hex)\n# - Control Register    02000004\n# - FCATIME             02000008\n# - CTIME               0200000C\n\n# Triva module initialisation as MASTER\n# Write Control Register (0x02000004)\nwrite A32 D32 0x0004 0x00000004         # MASTER - has to come first!\nwrite A32 D32 0x0004 0x00001000         # disable trigger bus\nwrite A32 D32 0x0004 0x00000010         # HALT\nwrite A32 D32 0x0004 0x00000040         # CLEAR\nwrite A32 D32 0x0008 $(65535 - 10)      # Fast Clear\n#write A32 D32 0x000C $(65535 - 200)     # Ctime\n#write A32 D32 0x000C $(65535 - 250)     # Ctime\nwrite A32 D32 0x000C $(65535 - 1300)     # Ctime\n\n######## MVLC setup for TRIVA triggering ########\n# Optional signal aliases: map Triva trigger values to MVLC IRQs (1..15).\n# If no alias is set the trigger number is directly taken as the IRQ number.\n# Otherwise if one of the alias register pairs is used all pairs will be active too.\n# Mapping a trigger value to 0 makes the MVLC ignore the trigger.\n\nwriteabs A32 D16 0xFFFF7000 14  # TRIVA Trigger 14 (Start)\nwriteabs A32 D16 0xFFFF7002 14  # mapped to MVLC IRQ 14\n\nwriteabs A32 D16 0xFFFF7004 15  # TRIVA Trigger 15 (Stop)\nwriteabs A32 D16 0xFFFF7006 15  # mapped to MVLC IRQ 15\n\nwriteabs A32 D16 0xFFFF7008  1  # TRIVA Trigger\nwriteabs A32 D16 0xFFFF700A  8  # mapped to MVLC IRQ (data_event)\n\nwriteabs A32 D16 0xFFFF700C  2  # TRIVA Trigger\nwriteabs A32 D16 0xFFFF700E  9  # mapped to MVLC IRQ (scaler_event)\n\nwriteabs A32 D16 0xFFFF7010  3\t# Map trigger 3 (bit combination of 1&2) to the\nwriteabs A32 D16 0xFFFF7012 10\t# data event too. This avoids the readout getting\n                                # stuck when both the data and scaler triggers are\n                                # active at the same time.\nwriteabs A32 D16 0xFFFF7014  4\nwriteabs A32 D16 0xFFFF7016 11\n\n/*\n# All available signal alias registers since MVLC firmware 0x0023.\n\nwriteabs A32 D16 0xFFFF7000 0      # triva trigger number\nwriteabs A32 D16 0xFFFF7002 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF7004 0      # triva trigger number\nwriteabs A32 D16 0xFFFF7006 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF7008 0      # triva trigger number\nwriteabs A32 D16 0xFFFF700A 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF700C 0      # triva trigger number\nwriteabs A32 D16 0xFFFF700E 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF7010 0      # triva trigger number\nwriteabs A32 D16 0xFFFF7012 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF7014 0      # triva trigger number\nwriteabs A32 D16 0xFFFF7016 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF7018 0      # triva trigger number\nwriteabs A32 D16 0xFFFF701A 0      # mapped to mvlc irq\n\nwriteabs A32 D16 0xFFFF701C 0      # triva trigger number\nwriteabs A32 D16 0xFFFF701E 0      # mapped to mvlc irq\n*/"
                            }
                        ],
                        "name": "triva7_master",
                        "type": "triva7_master",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{e4ffa2dd-ae9f-4942-a92a-b95d37c6bc3f}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Readout script for the Triva 7 master; activated via VME IRQ 4.\n# Reads the trigger number from Triva and turns it into a MVLC IRQ signal.\n\nread A32 D32 0x0000 slow # preliminary <= joern\nread A32 D32 0x0000 slow\n\n#mvlc_stack_begin                        # For debugging only: puts following instructions into same execution stack\n                                        # when interactively running the script. Has no effect when running the DAQ\n                                        # normally.\n\n# evaluate trigger type\nmvlc_read_to_accu A32 D32 0x0000 slow   # Copy TRIVA status register to MVLC accumulator, slow cycle.\nmvlc_mask_shift_accu 0x0000000F 0       # Mask lower 4 bits of the accu, no shift.\nmvlc_signal_accu                        # Signal the accumulator creating a MVLC internal IRQ signal.\nwrite A32 D32 0x0000  0x00009000        # Triva Status Register: clear IRQ4 (EV_IRQ_CLEAR | IRQ_CLEAR)\n\n#marker 0x12345678\t\t\t\t\t\t# Debug: write a marker value identifying this event\n#mvlc_writespecial accu\t\t\t\t\t# Debug: write the accumulator value into the data stream\n\n#mvlc_stack_end                          # For debugging only; has no effect in normal execution.\n\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{04ec2e22-f132-4024-b4e4-acb16c8258b5}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 1342177280,
                        "enabled": true,
                        "id": "{0df85f55-ea40-4eef-9e13-6635468d5668}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{c35cbc30-0fee-4b53-a735-01b9d40acbc7}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "## JAM 06-04-22 cleanup of code \n\nprint \"VETAR module init...\"\nset crwait 1ms\n\nset configbase 0x280000 # configbase for slot 5\nset vmebase 0x50000000 # 5 * 0x10000000\nset ctrlbase 0x1400   # 5 * 0x400\n\nsetbase ${configbase}\n\n#JAM2022: the eprtk lib seems not to like hex format in expressions, so:\nset ADEM0  1568 #0x623 -3 JAM22 NOTE:  This shift does not matter for mvlc access! always reads correct value\nset ADEM1  1584 #0x633 -3\n\nset AMCAP0  288 # 0x123 -3\nset AMCAP1  320 # 0x143 -3\n\nset FUN0ADER    524128 # 0x7FF63 -3\nset FUN1ADER    524144 # 0x7FF73 -3 \nset FUN2ADER    524160 # 0x7FF83 -3\nset FUN3ADER    524176 # 0x7FF93 -3 \nset FUN4ADER    524192 # 0x7FFA3 -3\nset FUN5ADER    524208 # 0x7FFB3 -3\nset FUN6ADER    524224 # 0x7FFC3 -3 \nset FUN7ADER    524240 # 0x7FFD3 -3\n# JAM 01-03-2022: ADER addresses must be shifted down by 3 (address%4), see vetar_csr_write()\n\nset MBLT_ENDIAN 0x7FF50 #0xtff53 -3\n\nset INT_LEVEL   0x7ff58 #0x7ff5b -3 because of (address%4), see vetar_csr_write()\nset INTVECTOR   0x7ff5c #0x7ff5f -3 because of (address%4), see vetar_csr_write()\nset WB_32_64    0x7ff30 #0x7ff33 -3 because of (address%4), see vetar_csr_write()\nset BIT_SET_REG 0x7fff8 #0x7FFFB -3 because of (address%4), see vetar_csr_write()\nset BIT_CLR_REG 0x7FFF4 #0x7FFF7 -3 because of (address%4), see vetar_csr_write()\n\nset CRAM_OWNER 0x7fff0 # 0x7fff3 -3\n\nset RESET_CORE 0x80\nset ENABLE_CORE 0x10\n\nset WB32        0x1\nset WB64        0x0\n\nset EMUL_DAT_WD 48\nset MASTER_CTRL 24\nset MASTER_DATA 40\nset WINDOW_OFFSET_LOW  56\n\n\n## check vendor id\nset VETAR_VENDOR_ID\t\t0x80031\nset VME_VENDOR_ID_OFFSET   36 # 0x24\n\n\nprint \"checking vendor id, should be ${VETAR_VENDOR_ID}\"\n\n\nread cr d32 ${VME_VENDOR_ID_OFFSET} slow\nread cr d32 $( ${VME_VENDOR_ID_OFFSET} +4) slow\nread cr d32 $( ${VME_VENDOR_ID_OFFSET} +8) slow\n\nwait 10ms\n\n/*\n# the following is additional check if vetar cscr access is OK\nprint \"testing CRAM OWNER register:\"\nread cr d32 ${CRAM_OWNER} slow\nwrite cr d32 ${CRAM_OWNER} 0xF\nread cr d32 ${CRAM_OWNER} \nread cr d32 ${BIT_SET_REG} \nprint \"endian register:\"\nread cr d32 ${MBLT_ENDIAN} \nprint \"adem0\":\nread cr d32 ${ADEM0} slow\nread cr d32 $( ${ADEM0} + 4) slow \nread cr d32 $( ${ADEM0} + 8) slow\nread cr d32 $( ${ADEM0} + 12) slow\nprint \"adem1\":\nread cr d32 ${ADEM1} slow\nread cr d32 $( ${ADEM1} + 4) slow \nread cr d32 $( ${ADEM1} + 8) slow\nread cr d32 $( ${ADEM1} + 12) slow\nprint \"amcap0\":\nread cr d32 ${AMCAP0} \nread cr d32 $( ${AMCAP0} + 4) \nread cr d32 $( ${AMCAP0} + 8) \nread cr d32 $( ${AMCAP0} + 12) \nread cr d32 $( ${AMCAP0} + 16) \nread cr d32 $( ${AMCAP0} + 20) \nread cr d32 $( ${AMCAP0} + 24) \nread cr d32 $( ${AMCAP0} + 28) \nprint \"amcap1\":\nread cr d32 ${AMCAP1} \nread cr d32 $( ${AMCAP1} + 4) \nread cr d32 $( ${AMCAP1} + 8) \nread cr d32 $( ${AMCAP1} + 12) \nread cr d32 $( ${AMCAP1} + 16) \nread cr d32 $( ${AMCAP1} + 20) \nread cr d32 $( ${AMCAP1} + 24) \nread cr d32 $( ${AMCAP1} + 28) \n*/\n \n#    /* reset the core */\nwrite cr d32 ${BIT_SET_REG} ${RESET_CORE} # vetar_csr_write(RESET_CORE, privdata->cr_csr, BIT_SET_REG);\nwait 50ms\n#    /* disable the core */\nwrite cr d32 ${BIT_CLR_REG} ${ENABLE_CORE}  # vetar_csr_write(ENABLE_CORE, privdata->cr_csr, BIT_CLR_REG);\nwait ${crwait}\n #   /* default to 32bit WB interface */\nwrite cr d32 ${WB_32_64} ${WB32} #    vetar_csr_write(WB32, privdata->cr_csr, WB_32_64);\nwait ${crwait}\nset VME_A32_USER_DATA_SCT 9 # 0x09\n\nwrite cr d32 ${FUN0ADER}         0x50    \t\t\t\t\t\t #${(${vmebase} >> 24) & 0xFF}\nwait ${crwait}\nwrite cr d32 $( ${FUN0ADER} + 4)  0x00    \t\t\t\t\t\t\t#${(${vmebase} >> 16) & 0xFF}\nwait ${crwait}\nwrite cr d32 $( ${FUN0ADER} + 8)  0x00    \t\t\t\t\t\t\t#${(${vmebase} >> 8) & 0xFF}\nwait ${crwait}\nwrite cr d32 $( ${FUN0ADER} + 12) $( ${VME_A32_USER_DATA_SCT} * 4)  # (am & 0x3F) << 2;\n\nwait ${crwait}\n\nread cr d32 ${FUN0ADER} slow\nread cr d32 $( ${FUN0ADER} + 4)  slow\nread cr d32 $( ${FUN0ADER} + 8)  slow    \nread cr d32 $( ${FUN0ADER} + 12)  slow\n\nset VME_A24_USER_DATA_SCT 57 #0x39\n\nwrite cr d32 ${FUN1ADER}         0x00    \t\t\t\t\t\t #${(${ctrlbase} >> 24) & 0xFF}\nwait ${crwait}\nwrite cr d32 $( ${FUN1ADER} + 4)  0x00    \t\t\t\t\t\t\t #${(${ctrlbase} >> 16) & 0xFF}\nwait ${crwait}\nwrite cr d32 $( ${FUN1ADER} + 8)  0x14    \t\t\t\t\t\t\t #${(${ctrlbase} >> 8) & 0xFF} 14\nwait ${crwait}\nwrite cr d32 $( ${FUN1ADER} + 12) $( ${VME_A24_USER_DATA_SCT} * 4) # (am & 0x3F) << 2;\nwait ${crwait}\n\n\nwait ${crwait}\n\n/* \n#  check if contents are there, redundant if it works.\nread cr d32 ${FUN1ADER} slow\nread cr d32 $( ${FUN1ADER} + 4)  slow\nread cr d32 $( ${FUN1ADER} + 8)  slow    \nread cr d32 $( ${FUN1ADER} + 12)  slow\nwait ${crwait}\n*/\n\nwrite cr d32 ${BIT_SET_REG} ${ENABLE_CORE}  #    vetar_csr_write(ENABLE_CORE, privdata->cr_csr, BIT_SET_REG);\nwait 100ms\n\n## put to direct access register mode\nset DIRECT_ACCESS_CONTROL 4\nsetbase ${ctrlbase}\n\n#from vetar_wb_request:\n#print \"first vallue of master control:\"\n#read a24 d32  ${MASTER_CTRL} # just to see it...\nwrite a24 d32 ${MASTER_CTRL} 1 \n#  <- since we cannot branch on conditions much here, always acknowledge the control register JAM22;\n\n#vetar_wb_repl:\nwrite a24 d32 ${MASTER_DATA} 0\nwrite a24 d32 ${MASTER_CTRL} 3\nwait ${crwait}\n\n# following is in probe after wishbone register:\nwrite a24 d32 ${EMUL_DAT_WD} 0\nwrite a24 d32 ${WINDOW_OFFSET_LOW} 0\nwrite a24 d32 ${MASTER_CTRL} 0\nwait ${crwait}\n\nprint \"default value of dactl:\"\nread a24 d32 ${DIRECT_ACCESS_CONTROL} slow\n\n# following is for fallout (?) release:\nset tlu_address 0x2000200  \n#<- this value was checked with eb-ls for our vetar JAM 17-03-2022\nwrite a24 d32 ${DIRECT_ACCESS_CONTROL} ${tlu_address} # set tlu address for direct access mode\n#read a24 d32 ${DIRECT_ACCESS_CONTROL} slow\n\n# now put intialization of f_user.c:\nsetbase ${vmebase}\nwait 100ms\n\n#following defines are from gsi_tm_latch.h:\nset WR_TLU_FIFO_NR \t\t\t\t3\nset GSI_TM_LATCH_CH_SELECT \t\t0x058\nset GSI_TM_LATCH_CHNS_FIFOSIZE \t0x038\nset GSI_TM_LATCH_FIFO_CLEAR \t0x004\nset GSI_TM_LATCH_TRIG_ARMSET \t0x010\n\nwrite a32 d32 ${GSI_TM_LATCH_CH_SELECT} ${WR_TLU_FIFO_NR}\n\nprint \"size of  White Rabbit TLU FIFO:\"\nread a32 d32 ${GSI_TM_LATCH_CHNS_FIFOSIZE} slow\nwrite a32 d32 ${GSI_TM_LATCH_FIFO_CLEAR} 0xFFFFFFFF\nwrite a32 d32 ${GSI_TM_LATCH_TRIG_ARMSET} 0xFFFFFFFF\n\n"
                            }
                        ],
                        "name": "VETAR",
                        "type": "user01",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{adb9557d-c2f1-4517-924c-5de47577f1d0}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "set vmebase 0x50000000\nset GSI_TM_LATCH_FIFO_READY      0x000\nset GSI_TM_LATCH_FIFO_CNT        0x064       #FIFO Queue   fill count                  (ro)\nset GSI_TM_LATCH_FIFO_FTSHI      0x068       #timestamp HIGH words in cycles               (ro)\nset GSI_TM_LATCH_FIFO_FTSLO      0x06c       #timestamp LOW words in cycles            (ro)\nset GSI_TM_LATCH_FIFO_FTSSUB     0x070       #timestamp sub-cycle                          (ro)\nset GSI_TM_LATCH_FIFO_POP        0x05C       #pop the topmost FIFO Q Element           (wo)\n\n\n/* JAM 3-2022: we read out registers as is; formatting for time sorter is done in m_readout_mvlc*/\nmarker 0x12345678 # unique (?) header for m_readout_mvlc\nmarker 0x400 # subsystem ID\nread a32 d32 ${GSI_TM_LATCH_FIFO_READY}\nread a32 d32 ${GSI_TM_LATCH_FIFO_CNT}\nwrite a32 d32 ${GSI_TM_LATCH_FIFO_POP} 0xF\n# for testing, just take timestamps as is. bit operations with accu maybe later, or in special unpacker...\n#read a32 d32 ${GSI_TM_LATCH_FIFO_FTSSUB} \nread a32 d32 ${GSI_TM_LATCH_FIFO_FTSLO}\nread a32 d32 ${GSI_TM_LATCH_FIFO_FTSHI}\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{bd6dbbd2-d954-47c9-93e0-1cc5dd3f2993}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_0_catch_triva_trigger_type",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bb"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "4"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{da829f12-8854-487e-999d-49793eb92eeb}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n/*\nwriteabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\nwriteabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\nwriteabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\nwriteabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\nwriteabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n*/\n\nsetbase 0x02000000\n# Start_acq\nwrite A32 D32 0x0004 0x00000010         # HALT\nwrite A32 D32 0x0004 0x00000040         # CLEAR\nwrite A32 D32 0x0000 14                 # Master sets Trigger 14\nwrite A32 D32 0x0004  0x00000003        # (EN_IRQ | GO); Enable IRQ and send Trigger 14"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{f7b00dd6-2ea3-42b4-b148-5249844dfdf4}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n\nsetbase 0x02000000\nwrite A32 D32 0x0004 0x00000010         # HALT\nwrite A32 D32 0x0004 0x00000040         # CLEAR\nwrite A32 D32 0x0000 15                 # Master sets Trigger 15\nwrite A32 D32 0x0004  0x00000003        # (EN_IRQ | GO); Enable IRQ and send Trigger 14\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{055926a4-b110-4069-affc-0d735c010588}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{44300572-49fc-4f5b-acac-74385ef0ed0f}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{b8d820d9-b111-4a46-aa6e-946c3ac80886}",
                "irqLevel": 14,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{e6079bc1-340a-4d14-b1f5-9a81bbc19b57}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{ca08d20b-5490-486f-8d01-58b9aaaa244a}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{6d777c0c-4ca1-4e68-8ec5-d4e6678821be}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\nmarker 0x14141414\n\n# reset trigger\nwrite A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n\n# for trigger 14 also reset tlu:\nset vmebase 0x50000000\nset GSI_TM_LATCH_FIFO_CLEAR \t0x004\nsetbase ${vmebase}\nwrite a32 d32 ${GSI_TM_LATCH_FIFO_CLEAR} 0xFFFFFFFF"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{3a40cfd2-89e8-4820-8dfc-8334c86573ce}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_1_start_acquisition",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bc"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "14"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{e9d255cf-5a7b-43e4-b669-757b96fdeb24}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": ""
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{52fd893a-a214-46b7-b743-b16e44b2e03e}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": ""
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{e9c3b9ff-e186-4208-949e-66465b94022a}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{3e3f96d7-f272-4bfa-bd6b-516a0df779f9}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{c0f40af2-a333-4714-b1b6-cd036fc40f57}",
                "irqLevel": 15,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{e4eb9b26-2220-4158-b0cf-e62be8bef74f}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{a69e96a4-0418-435d-b073-13401fe9a76f}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{c788e4bb-3c4d-45b6-86fc-665e3b2d9a4a}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\n#marker 0x15151515\n\n# reset trigger\n# write A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n\n# for trigger 15 also reset tlu:\nset vmebase 0x50000000\nset GSI_TM_LATCH_FIFO_CLEAR \t0x004\nsetbase ${vmebase}\nwrite a32 d32 ${GSI_TM_LATCH_FIFO_CLEAR} 0xFFFFFFFF"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{a01a1e20-f63c-4990-81dc-ec676c2c0dbc}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_2_stop_acquisition",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bd"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "15"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{42df7b6a-ab10-4b2d-a851-2f4f4d21eefb}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n#writeabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\n#writeabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\n#writeabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\n#writeabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{abfc76a9-2c6e-4eee-ba50-eb2081310402}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{6c349004-787b-4d0a-bf10-b99c1a68f0a3}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{b73d8cba-b986-4e27-85c6-2d2f8f43ed5f}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{18e9af46-0cbc-4df2-8ba0-dfba6c907a53}",
                "irqLevel": 8,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 327680,
                        "enabled": false,
                        "id": "{51be2339-cfe2-4fd1-8ca5-c98ee73d0209}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{b954652c-2eda-404f-ab6b-78bde6f7a257}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x1120    0x1     # module reset\nwrite a32 d16 0x1108   0x31     # contro: header ena | buserr ena | external trigger ena\nwrite a32 d32 0x1100 0xffffffff # enable all channels\n\n"
                            }
                        ],
                        "name": "V830",
                        "type": "user04",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{58e5ea89-1c4d-4e20-b6f4-273397240661}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#\nmbltfifo a32 0x0000 65535\n#bltfifo a32 0x0000 65535\n#"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{ec0eebe0-7e26-4c63-8be6-a7aa21fcba44}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 655360,
                        "enabled": false,
                        "id": "{ea07e04a-7e37-451a-87e0-846ecb58ba3e}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{ac7c69f6-f81f-41ba-b694-0f6cb6378da0}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "# soft reset\nwrite a32 d16 0x1006 0x80   # bit set 1\nwrite a32 d16 0x1008 0x80   # bit clear 1\nwrite a32 d16 0x1008 0x8    # bit clear 1\nwrite a32 d16 0x1008 0x10   # bit clear 1\n#\n#standard setup\nwrite a32 d16 0x1032 0x4    # bit set 2\nwrite a32 d16 0x1034 0x4    # bit clear 2\nwrite a32 d16 0x1034 0x40   # bit clear 2\nwrite a32 d16 0x1040 0x1    # event counter reset\nwrite a32 d16 0x1034 0x0    # bit clear 2\nwrite a32 d16 0x1034 0x1    # bit clear 2\nwrite a32 d16 0x1034 0x8    # bit clear 2\nwrite a32 d16 0x1034 0x10   # bit clear 2\nwrite a32 d16 0x1034 0x20   # bit clear 2\nwrite a32 d16 0x1034 0x40   # bit clear 2\nwrite a32 d16 0x1034 0x1000 # bit clear 2\nwrite a32 d16 0x1034 0x2000 # bit clear 2\nwrite a32 d16 0x1032 0x80   # bit set 2\nwrite a32 d16 0x1032 0x100  # bit set 2\nwrite a32 d16 0x1032 0x800  # bit set 2\nwrite a32 d16 0x1032 0x1000 # bit set 2\nwrite a32 d16 0x1032 0x4000 # bit set 2\n#\n#thresholds\nwrite a32 d16 0x1080 0x1   # threshold channel 0\nwrite a32 d16 0x1082 0x1   # threshold channel 1\nwrite a32 d16 0x1084 0x1   # threshold channel 2\nwrite a32 d16 0x1086 0x1   # threshold channel 3\nwrite a32 d16 0x1088 0x1   # threshold channel 4\nwrite a32 d16 0x108a 0x1   # threshold channel 5\nwrite a32 d16 0x108c 0x1   # threshold channel 6\nwrite a32 d16 0x108e 0x1   # threshold channel 7\nwrite a32 d16 0x1090 0x1   # threshold channel 8\nwrite a32 d16 0x1092 0x1   # threshold channel 9\nwrite a32 d16 0x1094 0x1   # threshold channel 10\nwrite a32 d16 0x1096 0x1   # threshold channel 11\nwrite a32 d16 0x1098 0x1   # threshold channel 12\nwrite a32 d16 0x109a 0x1   # threshold channel 13\nwrite a32 d16 0x109c 0x1   # threshold channel 14\nwrite a32 d16 0x109e 0x1   # threshold channel 15\nwrite a32 d16 0x10a0 0x1   # threshold channel 16\nwrite a32 d16 0x10a2 0x1   # threshold channel 17\nwrite a32 d16 0x10a4 0x1   # threshold channel 18\nwrite a32 d16 0x10a6 0x1   # threshold channel 19\nwrite a32 d16 0x10a8 0x1   # threshold channel 20\nwrite a32 d16 0x10aa 0x1   # threshold channel 21\nwrite a32 d16 0x10ac 0x1   # threshold channel 22\nwrite a32 d16 0x10ae 0x1   # threshold channel 23\nwrite a32 d16 0x10b0 0x1   # threshold channel 24\nwrite a32 d16 0x10b2 0x1   # threshold channel 25\nwrite a32 d16 0x10b4 0x1   # threshold channel 26\nwrite a32 d16 0x10b6 0x1   # threshold channel 27\nwrite a32 d16 0x10b8 0x1   # threshold channel 28\nwrite a32 d16 0x10ba 0x1   # threshold channel 29\nwrite a32 d16 0x10bc 0x1   # threshold channel 30\nwrite a32 d16 0x10be 0x1   # threshold channel 31\n#\nwrite a32 d16 0x1010 0x20   # control no align 64 | buserr | not blkend\n"
                            }
                        ],
                        "name": "V785",
                        "type": "user02",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{72ecba66-115c-4082-8629-183ed7aff711}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\n#read a32 d16 0x1002 # geo address\n#read a32 d16 0x1000 # firmware revison\n#marker 0xbbbbbbbb\n#\n#mbltfifo a32 0x0000 65535\nbltfifo a32 0x0000 65535\n#\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{db6aee3d-ba87-4cf7-be6a-c5bd9add04be}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 152043520,
                        "enabled": false,
                        "id": "{6a17fb26-b3da-4f65-8610-b314ab799393}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{fd05c8e2-d86c-4774-bf98-694eef2f4366}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x6008 1 # soft reset \nwait 500ms\nwrite a32 d16 0x6004 7 # module id\nwrite a32 d16 0x6036 0 # multi event\nwrite a32 d16 0x6038 0 # event counter, not time stamp\nwrite a32 d16 0x6042 4 # adc resolution\nwrite a32 d16 0x6032 2 # 32 bit data\nwrite a32 d16 0x6044 0 # output format\nwrite a32 d16 0x603c 1 # fifo reset\nwrite a32 d16 0x6090 3 # counter reset\n#\nwrite a32 d16 0x4000 5 # threshholds cha 0\nwrite a32 d16 0x4002 5 \nwrite a32 d16 0x4004 5 \nwrite a32 d16 0x4006 5\nwrite a32 d16 0x4008 5\nwrite a32 d16 0x400a 5\nwrite a32 d16 0x400c 5\nwrite a32 d16 0x400e 5 \nwrite a32 d16 0x4010 5\nwrite a32 d16 0x4012 5\nwrite a32 d16 0x4014 5\nwrite a32 d16 0x4016 5\nwrite a32 d16 0x4018 5\nwrite a32 d16 0x401a 5\nwrite a32 d16 0x401c 5\nwrite a32 d16 0x401e 5\nwrite a32 d16 0x4020 5\nwrite a32 d16 0x4022 5\nwrite a32 d16 0x4024 5\nwrite a32 d16 0x4026 5\nwrite a32 d16 0x4028 5\nwrite a32 d16 0x402a 5\nwrite a32 d16 0x402c 5\nwrite a32 d16 0x402e 5\nwrite a32 d16 0x4030 5\nwrite a32 d16 0x4032 5 \nwrite a32 d16 0x4034 5\nwrite a32 d16 0x4036 5\nwrite a32 d16 0x4038 5\nwrite a32 d16 0x403a 5\nwrite a32 d16 0x403c 5\nwrite a32 d16 0x403e 5\n#\n#write a32 d16 0x6034 1 # read reset\n#write a32 d16 0x603a 1 # start acq\n\n0x603a 0   # stop acq\n0x6090 3   # reset counters \n0x603c 1   # fifo reset\n0x6034 1   # readout reset\n0x603a 1   # start acq"
                            }
                        ],
                        "name": "MADC_GSI",
                        "type": "user03",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{d93274d1-6a8c-4825-9e45-621c2d855422}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\nread a32 d16 0x6004 # module id\nread a32 d16 0x600e # firmware revison\n#marker 0xbbbbbbbb\n#\nmbltfifo a32 0x0000 65535\n#bltfifo a32 0x0000 65535\n#\n\n#\n#marker 0xcccccccc\n#\nwrite a32 d16 0x6034 1 # read reset\n#\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{a5e20783-3a68-49cd-b603-83313399b3d0}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 153092096,
                        "enabled": false,
                        "id": "{4c2460db-684f-4d01-b6df-36a3d53a4a1f}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{93b9c04f-172f-4a1b-8b2f-6262a82d30a7}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x6008 1 # soft reset \nwait 500ms\nwrite a32 d16 0x6004 8 # module id\nwrite a32 d16 0x6036 0 # multi event\nwrite a32 d16 0x6038 0 # event counter, not time stamp\nwrite a32 d16 0x6042 4 # adc resolution\nwrite a32 d16 0x6032 2 # 32 bit data\nwrite a32 d16 0x6044 0 # output format\nwrite a32 d16 0x603c 1 # fifo reset\nwrite a32 d16 0x6090 3 # counter reset\n#\nwrite a32 d16 0x4000 5 # threshholds cha 0\nwrite a32 d16 0x4002 5 \nwrite a32 d16 0x4004 5 \nwrite a32 d16 0x4006 5\nwrite a32 d16 0x4008 5\nwrite a32 d16 0x400a 5\nwrite a32 d16 0x400c 5\nwrite a32 d16 0x400e 5 \nwrite a32 d16 0x4010 5\nwrite a32 d16 0x4012 5\nwrite a32 d16 0x4014 5\nwrite a32 d16 0x4016 5\nwrite a32 d16 0x4018 5\nwrite a32 d16 0x401a 5\nwrite a32 d16 0x401c 5\nwrite a32 d16 0x401e 5\nwrite a32 d16 0x4020 5\nwrite a32 d16 0x4022 5\nwrite a32 d16 0x4024 5\nwrite a32 d16 0x4026 5\nwrite a32 d16 0x4028 5\nwrite a32 d16 0x402a 5\nwrite a32 d16 0x402c 5\nwrite a32 d16 0x402e 5\nwrite a32 d16 0x4030 5\nwrite a32 d16 0x4032 5 \nwrite a32 d16 0x4034 5\nwrite a32 d16 0x4036 5\nwrite a32 d16 0x4038 5\nwrite a32 d16 0x403a 5\nwrite a32 d16 0x403c 5\nwrite a32 d16 0x403e 5\n#\n#write a32 d16 0x6034 1 # read reset\n#write a32 d16 0x603a 1 # start acq\n\n0x603a 0   # stop acq\n0x6090 3   # reset counters \n0x603c 1   # fifo reset\n0x6034 1   # readout reset\n0x603a 1   # start acq"
                            }
                        ],
                        "name": "MADC_GSI",
                        "type": "user03",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{c546b3cb-290d-4b2a-aa91-c3cc1e05027e}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\nread a32 d16 0x6004 # module id\nread a32 d16 0x600e # firmware revison\n#marker 0xbbbbbbbb\n#\nmbltfifo a32 0x0000 65535\n#bltfifo a32 0x0000 65535\n#\n\n#\n#marker 0xcccccccc\n#\nwrite a32 d16 0x6034 1 # read reset\n#"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{55220449-9912-4a39-8ffd-bef1d5b118ee}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 65536,
                        "enabled": false,
                        "id": "{7954275e-eecb-46c9-a025-8269c9b9bd93}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{7eab5c8c-8d62-4550-871c-6f13696d04b7}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x1014 0x1     # module reset\nwrite a32 d16 0x100e 0x8     # geo address\n#\n# HPTDC Micro Controller commands\n#\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x0     # set trigger matching mode\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1000  # set window width  \nwrite a32 d16 0x102e 0x80    # 80*25ns - 2us#\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1100  # set window offset   \nwrite a32 d16 0x102e 0xffd8  # 0xffd8 := -40*25 = -1us\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1200  # set extra search margin    \nwrite a32 d16 0x102e 0x0     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1300  # set reject margin   \nwrite a32 d16 0x102e 0x1     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1400  # enable subtraction of trigger time  \nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x2200  # enable leading/trailing edge detection   \nwrite a32 d16 0x102e 0x3     #  1: only trailing, 2: only leading. 3: both \nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x200   # set read mode\n#\n# back to V1290 commands\n#\nwait 10ms\n#write a32 d16 0x1000 0x1   #enable fifo | enabe buserr\n\nwrite a32 d16 0x1000 0x231   \nwrite a32 d16 0x1022 0x64\nwrite a32 d16 0x1024 0x1"
                            }
                        ],
                        "name": "V1290",
                        "type": "user01",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{25c96d11-d123-48a9-a7bf-b89550ffbae8}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\n#read a32 d16 0x1002 # geo address\n#read a32 d16 0x1000 # firmware revison\n#marker 0xbbbbbbbb\n#\n# mbltfifo a32 0x0000 65535\n# bltfifo a32 0x0000 65535\nmblts a32 0x0000 65535\n#\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{b2dbf32c-0881-459a-8efd-ac42e5079023}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 131072,
                        "enabled": false,
                        "id": "{6cc164c1-3a53-421b-936a-caa6a6c7076d}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{85da5304-13d4-48e2-95de-3109b0243f74}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x1014 0x1     # module reset\nwrite a32 d16 0x100e 0x9     # geo address \n#\n# HPTDC Micro Controller commands\n#\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x0     # set trigger matching mode\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1000  # set window width  \nwrite a32 d16 0x102e 0x80    # 80*25ns - 2us#\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1100  # set window offset   \nwrite a32 d16 0x102e 0xffd8  # 0xffd8 := -40*25 = -1us\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1200  # set extra search margin    \nwrite a32 d16 0x102e 0x0     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1300  # set reject margin   \nwrite a32 d16 0x102e 0x1     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1400  # enable subtraction of trigger time  \nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x2200  # enable leading/trailing edge detection   \nwrite a32 d16 0x102e 0x3     #  1: only trailing, 2: only leading. 3: both \nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x200   # set read mode\n#\n# back to V1290 commands\n#\nwait 10ms\n#write a32 d16 0x1000 0x1   #enable fifo | enabe buserr\n\nwrite a32 d16 0x1000 0x231   \nwrite a32 d16 0x1022 0x64\nwrite a32 d16 0x1024 0x1  \n\n"
                            }
                        ],
                        "name": "V1290",
                        "type": "user01",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{3df6937f-0fb5-4b43-8364-50f5c154b90e}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\n#read a32 d16 0x1002 # geo address\n#read a32 d16 0x1000 # firmware revison\n#marker 0xbbbbbbbb\n#\n# mbltfifo a32 0x0000 65535\n# bltfifo a32 0x0000 65535\nmblts a32 0x0000 65535\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{aaf4d73b-b15c-4cf3-b090-68ab65e23bdb}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 262144,
                        "enabled": false,
                        "id": "{79cd18af-20af-4b92-a3ab-ff9fc4b63eca}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{aeb8c8a8-a90f-4656-a35c-5605a8445872}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0x1006 0x80   # bit set 1:   soft reset\nwrite a32 d16 0x1008 0x80   # bit clear 1:\n#\nwrite a32 d16 0x1008 0x8    # bit clear 1:\nwrite a32 d16 0x1008 0x10   # bit clear 1:\n#\nwrite a32 d16 0x1032 0x4    # bit set 2:   clear data\nwrite a32 d16 0x1034 0x4    # bit clear 2: clear data and rd/wr pointers\nwrite a32 d16 0x1034 0x40   # bit clear 2:\n#\nwrite a32 d16 0x1040 0x1    # event counter reset\n#\nwrite a32 d16 0x1034 0x0    # bit clear 2: \nwrite a32 d16 0x1034 0x1    # bit clear 2:\nwrite a32 d16 0x1034 0x8    # bit clear 2:\nwrite a32 d16 0x1034 0x10   # bit clear 2:\nwrite a32 d16 0x1034 0x20   # bit clear 2:\nwrite a32 d16 0x1034 0x40   # bit clear 2:\nwrite a32 d16 0x1034 0x400  # bit clear 2:\nwrite a32 d16 0x1034 0x1000 # bit clear 2:\nwrite a32 d16 0x1034 0x2000 # bit clear 2:\n#\nwrite a32 d16 0x1032 0x80   # bit set 2:\nwrite a32 d16 0x1032 0x100  # bit set 2:\nwrite a32 d16 0x1032 0x800  # bit set 2:\nwrite a32 d16 0x1032 0x1000 # bit set 2\nwrite a32 d16 0x1032 0x4000 # bit set 2:\n#\nwrite a32 d16 0x1060 0xff   # set tdc range\nwrite a32 d16 0x1060 0x1e   # set tdc range\n#\nwrite a32 d16 0x1080 0x0   # threshold channel 0\nwrite a32 d16 0x1082 0x0   # threshold channel 1\nwrite a32 d16 0x1084 0x0   # threshold channel 2\nwrite a32 d16 0x1086 0x0   # threshold channel 3\nwrite a32 d16 0x1088 0x0   # threshold channel 4\nwrite a32 d16 0x108a 0x0   # threshold channel 5\nwrite a32 d16 0x108c 0x0   # threshold channel 6\nwrite a32 d16 0x108e 0x0   # threshold channel 7\nwrite a32 d16 0x1090 0x0   # threshold channel 8\nwrite a32 d16 0x1092 0x0   # threshold channel 9\nwrite a32 d16 0x1094 0x0   # threshold channel 10\nwrite a32 d16 0x1096 0x0   # threshold channel 11\nwrite a32 d16 0x1098 0x0   # threshold channel 12\nwrite a32 d16 0x109a 0x0   # threshold channel 13\nwrite a32 d16 0x109c 0x0   # threshold channel 14\nwrite a32 d16 0x109e 0x0   # threshold channel 15\nwrite a32 d16 0x10a0 0x0   # threshold channel 16\nwrite a32 d16 0x10a2 0x0   # threshold channel 17\nwrite a32 d16 0x10a4 0x0   # threshold channel 18\nwrite a32 d16 0x10a6 0x0   # threshold channel 19\nwrite a32 d16 0x10a8 0x0   # threshold channel 20\nwrite a32 d16 0x10aa 0x0   # threshold channel 21\nwrite a32 d16 0x10ac 0x0   # threshold channel 22\nwrite a32 d16 0x10ae 0x0   # threshold channel 23\nwrite a32 d16 0x10b0 0x0   # threshold channel 24\nwrite a32 d16 0x10b2 0x0   # threshold channel 25\nwrite a32 d16 0x10b4 0x0   # threshold channel 26\nwrite a32 d16 0x10b6 0x0   # threshold channel 27\nwrite a32 d16 0x10b8 0x0   # threshold channel 28\nwrite a32 d16 0x10ba 0x0   # threshold channel 29\nwrite a32 d16 0x10bc 0x0   # threshold channel 30\nwrite a32 d16 0x10be 0x0   # threshold channel 31\n#\nwrite a32 d16 0x1010 0x20   # control no align 64 | buserr | not blkend\n\n"
                            }
                        ],
                        "name": "V775",
                        "type": "user01",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{7d9275d2-ae14-49dc-80e7-041a9477739b}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#marker 0xaaaaaaaa\n#read a32 d16 0x1002 # geo address\n#read a32 d16 0x1000 # firmware revison\n#marker 0xbbbbbbbb\n#\n#mbltfifo a32 0x0000 65535\nbltfifo a32 0x0000 65535\n#"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{86713b00-8d06-4327-94b1-0cb47e26eabb}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 117440512,
                        "enabled": false,
                        "id": "{3437ad97-0a55-48fa-93ea-a87254f82860}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{f5c85fb8-f019-47b5-8c77-a5e1e6bcac68}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d32 0x800008 0x2         # cpld trigger lemo in, external clock\nread  a32 d32 0x14                 # read status register\nwrite a32 d32 0x18     0x01ff81f6  # set trigger window: 2555 ns before -, 2510 ns after trigger\nread  a32 d32 0x18                 # read back trigger window\nwrite a32 d32 0x0      0xffffffff  # enable 32 channel\nwrite a32 d32 0xc      0           # toggle reset\nwrite a32 d32 0xc      1           #     \"\"\nwrite a32 d32 0x4      0           # toggle trigger enable\nwrite a32 d32 0x4      0xffffffff  #     \"\"\nwrite a32 d32 0x30     1           # start reset !?\nwrite a32 d32 0x38     0xffffffff  # invert all channels\n"
                            }
                        ],
                        "name": "VFTX",
                        "type": "user05",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{bf3b3626-5aa0-4d19-9f75-0bf5cf30e85f}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "marker 0xab000000\nread  a32 d32 0x18 slow                      # read trigger window register\nread  a32 d32 0x14 slow                      # read status register\n#\n#mvlc_set_address_inc_mode fifo               # fifo is default    \nmvlc_read_to_accu a32 d32 0x14 slow          # read status to accu\nmvlc_mask_shift_accu 0x00003ff0 28           # mask 3ff0 and shift >>4 (rotate <<28) i.o. to get event size\nread a32 d32 0x1c slow                       # read vftx data \n# \nwrite a32 d32 0xc      0           # toggle reset\nwrite a32 d32 0xc      1           #     \"\"\nwrite a32 d32 0x4      0           # toggle trigger enable\nwrite a32 d32 0x4      0xffffffff  #     \"\"\n \n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{ab807ea5-27db-4f7f-9f6e-3d9466549716}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 134217728,
                        "enabled": false,
                        "id": "{43c04f8b-7266-49f7-9744-81ef1f4f83b2}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{74b3d4f6-1b2a-4d6c-93dc-fc4d4268e3ae}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d32 0x800008 0x2         # cpld trigger lemo in, external clock\nread  a32 d32 0x14                 # read status register\nwrite a32 d32 0x18     0x01ff81f6  # set trigger window: 2555 ns before -, 2510 ns after trigger\nread  a32 d32 0x18                 # read back trigger window\nwrite a32 d32 0x0      0xffffffff  # enable 32 channel\nwrite a32 d32 0xc      0           # toggle reset\nwrite a32 d32 0xc      1           #     \"\"\nwrite a32 d32 0x4      0           # toggle trigger enable\nwrite a32 d32 0x4      0xffffffff  #     \"\"\nwrite a32 d32 0x30     1           # start reset !?\nwrite a32 d32 0x38     0xffffffff  # invert all channels\n"
                            }
                        ],
                        "name": "VFTX",
                        "type": "user05",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{54e3259b-9a4c-4885-a009-d6adc33efdee}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "marker 0xab010000\nread  a32 d32 0x18 slow                      # read trigger window register\nread  a32 d32 0x14 slow                      # read status register\n#\n#mvlc_set_address_inc_mode fifo               # fifo is default    \nmvlc_read_to_accu a32 d32 0x14 slow          # read status to accu\nmvlc_mask_shift_accu 0x00003ff0 28           # mask 3ff0 and shift >>4 (rotate <<28) i.o. to get event size\nread a32 d32 0x1c slow                       # read vftx data \n# \nwrite a32 d32 0xc      0           # toggle reset\nwrite a32 d32 0xc      1           #     \"\"\nwrite a32 d32 0x4      0           # toggle trigger enable\nwrite a32 d32 0x4      0xffffffff  #     \"\"\n "
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{540816a6-3f2b-491d-82a2-5c9e40518d2b}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 117440512,
                        "enabled": false,
                        "id": "{addd6c9d-353b-4648-83f8-54b1fbd6c73e}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{dc1f62ea-f65f-4a3c-99a5-22800a69bc70}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "# VMMR\nwrite a32 d16 0x6008     1\nwait 100ms\nwrite a32 d16 0x6004     0\nwrite a32 d16 0x6036     0  # single event mode\nwrite a32 d16 0x6038     0  # provide event counter, not time stamp\nwrite a32 d16 0x6032     2  # 32 bit data \n\nwrite a32 d16 0x6042  0xff  # activate all 8 mmr buses\nwrite a32 d16 0x6050  3996  # 3996: 500 ns before trigger\nwrite a32 d16 0x6054   200  #  200: 1 us in total (500 ns before, 500 ns after trigger)\nwrite a32 d16 0x6058     1  # nim TI input trigger\nwrite a32 d16 0x605A     0  # no vmmr trigger from mmr\nwrite a32 d16 0x605C     0\n\nwrite a32 d16 0x6068     1  # (TI, trig0_in) input on\nwrite a32 d16 0x606A     1  # (    trig1_in) input on\nwrite a32 d16 0x606E     1  # nim0 set to CBUS\n\nwrite a32 d16 0x6096     0  # clock from VME bus\nwrite a32 d16 0x6098     1  # timestamp = time / ts_divisor\n\n# MMR (pulser test) settings\nwrite a32 d16 0x611A    50  # 50 = 10m of fiber bus length\nwrite a32 d16 0x6100    16  # for all frontends\n\nwrite a32 d16 0x6110   0xC  # address pulser register\nwrite a32 d16 0x6112     0  # switch local pulser off; Suggestion: use 0x6070 pulser reg.\nwrite a32 d16 0x6110   0x9  # threshold register for lower 32 channels of one bank\nwrite a32 d16 0x6112    35  # (35 = about 10%) max value 255 = 70% full range \nwrite a32 d16 0x6110   0xA  # threshold register for higher 32 channels of one bank \nwrite a32 d16 0x6112    35  # max value 255 = 70% full range \nwrite a32 d16 0x6110   0xB  # threshold register for channels 64-127 for mmr-128 \nwrite a32 d16 0x6112    35  # max value 255 = 70% full range \nwrite a32 d16 0x6110  0x10  # data threshold register\nwrite a32 d16 0x6112   200  # = 5% full range; Directly works on ADC-range; Max value 4095\n\n# back to VMMR\nwrite a32 d16 0x6070     1  # 0 -> off, 1 -> on, 3 -> generate trigger but no ampl. data\nwrite a32 d16 0x6072  0xFF  # maximum amplitude: 0xFF = 255\nwrite a32 d16 0x603A     0  # stop acq\nwrite a32 d16 0x6090     3  # reset counters\nwrite a32 d16 0x603C     1  # fifo reset\nwrite a32 d16 0x6034     1  # allow new trigger (gate?)\nwrite a32 d16 0x603A     1  # start acq\n"
                            }
                        ],
                        "name": "VMMR_GSI",
                        "type": "user08",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{9b04714c-cf11-494b-95cb-923bb81341ab}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#read a32 d16 0x6004 # module id\n#read a32 d16 0x600e # firmware revison\n\nmarker 0xa0000000\nmbltfifo a32 0x0000 65535\n\nwrite a32 d16 0x6034 1 # read reset\n\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{f533ee27-ac76-4a97-8dc4-2537398fd6f3}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 118489088,
                        "enabled": false,
                        "id": "{c655bf96-37aa-415f-866a-c46216e0b840}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{5eac3356-b9b7-4d59-9274-ccae5c5a6ad9}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "# MDPP \nwrite a32 d16 0x6008      1  # soft reset\nwait 500ms\nwrite a32 d16 0x6004      0  # set module id\nwrite a32 d16 0x6036      0  # single event mode\nwrite a32 d16 0x6038      0  # provide event counter, not time stamp\nwrite a32 d16 0x6032      2  # 32 bit data \nwrite a32 d16 0x6044      0  # no other choice\nwrite a32 d16 0x603C      1  # initialize fifo\n\nwrite a32 d16 0x605C      0\nwrite a32 d16 0x6050  16064  # 16064: 500 ns before trigger signal\nwrite a32 d16 0x6054    640  #   640: 1 us total (500 ns before, 500 ns after trigger)\n\nwrite a32 d16 0x6058      1  # nim TI input trigger\n \n# channel settings\nwrite a32 d16 0x6100      8  # 8: select all channels\nwrite a32 d16 0x6124     32  # set shaping time\nwrite a32 d16 0x6100      0  # 0: select channels  0,  1\nwrite a32 d16 0x611C 0x8fff  # set thresh channel  0\nwrite a32 d16 0x6100      6  # 6: select channels  12, 13\nwrite a32 d16 0x611C 0x2fff  # set thresh channel  12\nwrite a32 d16 0x6100      7  # 7: select channels  14, 15\nwrite a32 d16 0x611C  0xfff  # set thresh channel  14\nwrite a32 d16 0x611E  0xfff  # set thresh channel  15\n\n# more global settings\nwrite a32 d16 0x603A      0  # stop acq\nwrite a32 d16 0x6090      3  # reset counters\nwrite a32 d16 0x603C      1  # fifo reset\nwrite a32 d16 0x6034      1  # allow new trigger (gate?)\nwrite a32 d16 0x603A      1  # start acq \n"
                            }
                        ],
                        "name": "MDPP-32_GSI",
                        "type": "user09",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{907ff031-8d23-4844-ac21-397e62062f54}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "#read a32 d16 0x6004 # module id\n#read a32 d16 0x600e # firmware revison\n\nmarker 0xb0000000\nmbltfifo a32 0x0000 65535\n\nwrite a32 d16 0x6034 1 # read reset"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{0c4e2365-7830-442d-b59b-9b5a98626326}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 134217728,
                        "enabled": false,
                        "id": "{4afce39a-26c8-4bbe-a9ee-b5f36d739235}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{4d2846c5-3576-4a73-93ba-50e91b9a80c3}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d32 0x10 1 # enable channels\nwrite a32 d32 0x8  1 # reset"
                            }
                        ],
                        "name": "VUL_SCAL",
                        "type": "user07",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{46b42ca7-87b7-429a-9f34-1947df47143b}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "marker 0xC1000000 # JAM24: compatible with mbs user readout headers\n\nwrite a32 d32 0x4 1 # soft latch\n\nread a32 d32 0x4  slow # dummy read, because of soft latch issue\nread a32 d32 0x4  slow\nread a32 d32 0x8  slow\nread a32 d32 0xc  slow\nread a32 d32 0x10 slow\nread a32 d32 0x14 slow\nread a32 d32 0x18 slow \nread a32 d32 0x1c slow\nread a32 d32 0x20 slow\nread a32 d32 0x24 slow\nread a32 d32 0x28 slow\nread a32 d32 0x2c slow\nread a32 d32 0x30 slow\nread a32 d32 0x34 slow\nread a32 d32 0x38 slow\nread a32 d32 0x3c slow\nread a32 d32 0x40 slow\nread a32 d32 0x44 slow\nread a32 d32 0x48 slow\nread a32 d32 0x4c slow\nread a32 d32 0x50 slow\nread a32 d32 0x54 slow\nread a32 d32 0x58 slow\nread a32 d32 0x5c slow\nread a32 d32 0x60 slow\nread a32 d32 0x64 slow\nread a32 d32 0x68 slow\nread a32 d32 0x6c slow\nread a32 d32 0x70 slow\nread a32 d32 0x74 slow\nread a32 d32 0x78 slow\nread a32 d32 0x7c slow\nread a32 d32 0x80 slow"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{0d253e14-5970-4d33-ab3b-f8b316cd3355}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 17825792,
                        "enabled": false,
                        "id": "{1cd041a1-0f85-4507-92b0-539aac74879e}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{3a04aed5-25e7-4b42-a266-222a56817b0c}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "\n#--- 25 Jan 2024 (YT)\nwrite a32 d16 0x1014 0x1     # module reset\nwait 1000ms\nwrite a32 d16 0x1016 0x1     # software clear\nwait 1000ms\nwrite a32 d16 0x100e 0x12    # set geo address\nwait 1000ms\n#read a32 d16 0x1026 #firmware rev check\n#\n# do this control register first, 25 Jan 2024 (YT)\n# after several trial, control reg = 0x239 together with readout by mblts seems to be ok and stable.\nwrite a32 d16 0x1000 0x239 # default BERR enable, write empty, align64, INL comp on, ev fifo off, ext trig tag, 16MB MEB addr off\nwait 1000ms\nwrite a32 d16 0x1022 64\nwrite a32 d16 0x1024  0 # should be 0. 1 is not correct for us. \"1\" will cause BERR after single event, and lead to event-slip problem\nwait 1000ms\n#\n#---------------------------------\n# HPTDC Micro Controller commands\n#\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x0    # set trigger matching mode\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1000  # set window width\nwrite a32 d16 0x102e 220    # 200 := 5 us\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1100  # set window offset\nwrite a32 d16 0x102e 0xff60  # 0xff60 := -4 us\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1200  # set extra search margin\nwrite a32 d16 0x102e 0x4     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1300  # set reject margin\nwrite a32 d16 0x102e 0x4     #\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x1400  # enable subtraction of trigger time\nwait 1000ms\nread  a32 d16 0x1030\nwrite a32 d16 0x102e 0x2200  # enable leading/trailing edge detection\nwrite a32 d16 0x102e 0x3     # 1: only trailing, 2: only leading. 3: both (DAQ speed looked almost same, so take both, YT 2024/Jan/25)"
                            }
                        ],
                        "name": "V1190",
                        "type": "user10",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{7da8b51c-f0f0-4323-b9fd-b870221638ec}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\nmblts a32 0x0000 65535 # this is default"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{120aaf60-fb39-4c8d-83cc-8562cc92c92f}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 150994944,
                        "enabled": false,
                        "id": "{e94318e4-a9e0-4fa9-ba43-6558d5022720}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{db536aa6-6a97-4b06-86c3-6d01067b82fa}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "## JAM 15-04-2024:  all addresses and values dedicated to firmware fw_6e4ba1a9_trlo\n\nset vmebase 0x9000000 # for -addr=9\nsetbase  ${vmebase}\nset TRLO_PULSE_BASE\t\t\t\t\t0xa000\t#40960\nset TRLO_SETUP_MAX_MULTI_TRIG\t\t0x9730\n\nset TRLO_PULSE_MULTI_TRIG_BUF_CLEAR       0x200000\nset TRLO_PULSE_SERIAL_TSTAMP_BUF_CLEAR  0x20000000\nset TRLO_PULSE_SERIAL_TSTAMP_FAIL_CLEAR 0x40000000\n\n###################################################\n\n# we do not change the trloii setup (from trlo_ctrl) here!\nreadabs a32 d32 0x09004004 slow\nreadabs a32 d32 0x09004004 slow\nreadabs a32 d32 0x09004000 slow\nreadabs a32 d32 0x09004000 slow\n# just read compile time and firmware id once\n\n\n\n# here the actual readout init from MBS trlo_init:\nwrite  a32 d32 ${TRLO_SETUP_MAX_MULTI_TRIG} 0x1\nwrite  a32 d32 ${TRLO_PULSE_BASE} ${TRLO_PULSE_MULTI_TRIG_BUF_CLEAR}\nwrite  a32 d32 ${TRLO_PULSE_BASE} ${TRLO_PULSE_SERIAL_TSTAMP_BUF_CLEAR}\nwrite  a32 d32 ${TRLO_PULSE_BASE} ${TRLO_PULSE_SERIAL_TSTAMP_FAIL_CLEAR}\n\n"
                            }
                        ],
                        "name": "TRLOII",
                        "type": "user05",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{85107c6e-b0bc-4fef-9bc1-466407db6aa7}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# BLT readout until BERR or number of transfers reached\n# Readout commands go here. For example a BLT read from the module.\n# JAM 15-apr-2024: all addresses and values dedicated to firmware fw_6e4ba1a9_trlo\n\nset vmebase 0x9000000 # for -addr=9\nsetbase  ${vmebase}\n# JAM24 following specs from fw_6e4ba1a9_trlo:\n# not that mvme parser does not like hex format for addition..\nset TRLO_SCALER_BEFORE_LMU\t\t\t24608 \t#0x6020\nset TRLO_SCALER_BEFORE_DEADTIME\t\t24692\t#0x6074\nset TRLO_SCALER_AFTER_DEADTIME\t    24756   #0x60b4\nset TRLO_SCALER_AFTER_REDUCTION     24820   #0x60f4\n\n\nset TRLO_PULSE_BASE\t\t\t\t0xa000  #40960   \nset TRLO_MULTI_TRIGBUF_STATUS \t20544 \t#0x5040\nset TRLO_MULTI_TRIGBUF_BASE     45056\t#0xb000 \n# length 1024\n\nset TRLO_PULSE_TRIG_SCALER_LATCH 2\nset TRLO_PULSE_MUX_SRC_SCALER_LATCH 32\n#define TRLO_PULSE_TRIG_SCALER_LATCH                   0x00000002\n#define TRLO_PULSE_MUX_SRC_SCALER_LATCH                0x00000020\n\nset TRLO_MULT_ID \t\t0xcf\nset TRLO_SCALER_ID \t\t0xc7\n\nset TRLO_MULT_HEADER \t\t0xcf000000 \n# mark with 0 words, so unpacker will expect stack header with length next (usually 0xcf000003)\nset TRLO_SCALER_HEADER \t\t0xc70d000d\n\n# here multi trigbuf \n\nmarker ${TRLO_MULT_HEADER}\n# with accu mode, we take stack header instead JAM\n\n#mvlc_set_address_inc_mode fifo               # fifo is default   \nmvlc_read_to_accu a32 d32 ${TRLO_MULTI_TRIGBUF_STATUS} slow\n\n# JAM enable this for user trigger clear\n#writeabs A32 D32 0x2000000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR # user/user trigger clear\n\nmvlc_mask_shift_accu 0x000003FF 0 # gives number of \"words\" as in readout function code\nread a32 d32  ${TRLO_MULTI_TRIGBUF_BASE} slow\n# will read accu content times from the fifo address\n\n\n#mvlc_writespecial accu\t\n\n\n\n#########################################################\n#below the scalers:\nwrite  a32 d32 ${TRLO_PULSE_BASE} 0x22\n# this does not work:$( ${TRLO_PULSE_TRIG_SCALER_LATCH} | ${TRLO_PULSE_MUX_SRC_SCALER_LATCH} )\n#0x22\n\n# here header for scalers\n\nmarker ${TRLO_SCALER_HEADER}\n# first attempt: fixed value as emulation of given setup\n#todo: also use accu to evaluate  nunmber of scaleres in use from header?\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 0) slow\n#read a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 0) slow # check- value is the same?\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 4) slow\n#read a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 4) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 8) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 12) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 16) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 20) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 24) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 28) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 32) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 36) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 40) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 44) slow\nread a32 d32 $( ${TRLO_SCALER_BEFORE_LMU} + 48) slow\n\n# todo: here scalers before/after deadtime/reduction \n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 0) slow\n#read a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 0) slow # check it\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 0) slow\n#read a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 0) slow # check\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 0) slow\n#read a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 0) slow # check\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 4) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 4) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 4) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 8) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 8) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 8) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 12) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 12) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 12) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 16) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 16) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 16) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 20) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 20) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 20) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 24) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 24) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 24) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 28) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 28) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 28) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 32) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 32) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 32) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 36) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 36) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 36) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 40) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 40) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 40) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 44) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 44) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 44) slow\n\nread a32 d32 $( ${TRLO_SCALER_BEFORE_DEADTIME} + 48) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_DEADTIME} + 48) slow\nread a32 d32 $( ${TRLO_SCALER_AFTER_REDUCTION} + 48) slow\n\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{322203c1-bb32-4685-8b20-189ba876b401}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{8fc306ee-6ec9-40d9-b5fe-ff78154a0c1a}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{b0c8bb03-8fab-4ed6-9afd-59a59535be36}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{43236bf7-0d58-4f0b-a107-c183d57eb973}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\n# marker 0x10101010\n\n# reset trigger - JAM disable below for user trig clear\nwrite A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{c91087c1-2e51-4a9e-8c93-a923687ec4d2}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    },
                    {
                        "baseAddress": 458752,
                        "enabled": true,
                        "id": "{bea3c553-a56a-4fea-a8cf-1442f1b1e2e2}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{c81511e0-e108-4075-8d11-71541012156c}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": "write a32 d16 0xef24 1      # soft reset\nwait 10ms\nwrite a32 d16 0x8004 0x100  # set individula trigger\n#write a32 d16 0x8004 0x1000 # enable TRn to trigger\n#write a32 d16 0x8004 0x40   # TRn falling edge\n#write a32 d16 0x8004 0x800  # enable TRn readout\nwrite a32 d16 0x8120 0xf    # (all) groups in readout\nwrite a32 d16 0x8020 1      # 0: 1024,1: 520, 2:256, 3: 136 samples\nwrite a32 d16 0x80d8 1      # sampling frequency 2.5 ghz\nwrite a32 d16 0x8114 0      # triggerdelay\nwrite a32 d16 0xef08 0x13   # board id\nwait 10ms\nread  a32 d16 0x1088        #   \nwrite a32 d16 0x1098 0x5fd8 # group 0 offset, negative signals\nwait 10ms\nread  a32 d16 0x1188        #   \nwrite a32 d16 0x1198 0x5fd8 # group 1 offset, negative signals\nwait 10ms\nread  a32 d16 0x1288        #   \nwrite a32 d16 0x1298 0x5fd8 # group 2 offset, negative signals\nwait 10ms\nread  a32 d16 0x1388        #   \nwrite a32 d16 0x1398 0x5fd8 # group 3 offset, negative signals\nwait 10ms\nread  a32 d16 0x1088        # group 0  status   \nwrite a32 d16 0x10d4 0x51c6 # group 0  tr 0 threshhold\nwait 10ms\nread  a32 d16 0x1288        # group 2  status   \nwrite a32 d16 0x12d4 0x51c6 # group 2  tr 0 threshhold\nwait 10ms\nread  a32 d16 0xef00        #     \nwrite a32 d16 0xef00 0x10   # enable bus error at end of block vme readout\nread  a32 d16 0xef00\nwrite a32 d16 0xef1c 0x1    # max nr. of events per blt 18-Aug-2022\nread  a32 d16 0xef00\nread  a32 d16 0x8100\nwrite a32 d16 0x8100 0x4    # start acquisition\nwait 1s\n\n \n"
                            }
                        ],
                        "name": "V1742",
                        "type": "user06",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{75f684ad-6d13-4bd6-9b3d-58251897512f}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# JAM enable this for user trigger clear\n#writeabs A32 D32 0x2000000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR # user/user trigger clear\n\nread a32 d16 0x812c\nread a32 d16 0x814c \n#mbltfifo a32 0x0000 65535\n#mbltfifo a32 0x0000 0x300c\n\n\n#marker 0xaaaaaaaa\n#marker 0xaaaaaaaa\n#mvlc_wait 1000\n#mbltfifo a32 0x0000 0xc0c\n\n\n#mbltfifo a32 0x0000 0x10000\n\n#2esst 0x0000 160mb 65535\n#2esst 0x0000 276mb 65535\n2esst 0x0000 320mb 65535\n\n#marker 0xbbbbbbbb\n#marker 0xbbbbbbbb\n\n\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{bf468ad1-494a-4c7b-bc18-7e67520ff851}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_3_hardware_trigger_type_1",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "be"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "8"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{025f951b-ffe3-4894-8074-ca908ace65d0}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n#writeabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\n#writeabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\n#writeabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\n#writeabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{a6c7aad1-2e96-4584-a96b-a0cb88f86ffc}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{fc56c33a-8879-4102-84b4-749941cbd8b8}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{d6bf8dcd-a776-49f7-8e5d-b2691ac8a9d2}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{7c596565-9d23-4e3a-ab35-fa3c1d87523e}",
                "irqLevel": 9,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{979f4e71-4782-45e7-9252-19753011e942}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{71ae9d87-d282-4806-a93b-4e6d1a6ad099}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{4d5f276b-b25d-4638-95a1-2c016111fddf}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\nmarker 0x20202020\n\n# reset trigger\nwrite A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{00bfbe9e-1574-4e21-9a49-f3cedfa7091b}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_4_hardware_trigger_type_2",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bf"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "9"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{71a8f058-fe42-44dd-9b1e-e7a0c471dd64}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n#writeabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\n#writeabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\n#writeabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\n#writeabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{a462ae49-2188-40ec-8ed7-dcc995b3b5d7}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{46c3dd12-5bce-4da7-92ed-5f2c0be39b70}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{f15ce350-f4fa-4846-bfe9-8a56afdb95f2}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{0ac01d50-ca00-4f2c-9b56-eacae2f743d5}",
                "irqLevel": 10,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{46d05669-ce9e-4d8b-a657-7229196fb085}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{2502c915-ee9f-4423-8217-bacbb52df58b}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{ed40351f-8d56-457f-8ce2-e0361945d3ed}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\nmarker 0x30303030\n\n# reset trigger\nwrite A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{995572ba-b60d-433d-915b-89ad48d6917c}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_5_hardware_trigger_type_3",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bf"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "10"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{7e689571-922a-4312-b326-9c7dc5b94ad0}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n#writeabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\n#writeabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\n#writeabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\n#writeabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{44ed4003-2beb-48c0-addf-799dae59991b}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{23e3a58e-a2fd-4f3f-8ebb-4f1a4bcb3980}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{7cfaac7b-30a2-4ff4-9bfe-a44d56bdb681}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            },
            {
                "enabled": true,
                "id": "{f37f07f8-860e-4208-afec-f7df6b02e1a2}",
                "irqLevel": 11,
                "irqVector": 0,
                "modules": [
                    {
                        "baseAddress": 33554432,
                        "enabled": true,
                        "id": "{34acdd91-6f11-4286-9232-b35f5eb4d5f6}",
                        "initScripts": [
                            {
                                "enabled": true,
                                "id": "{65bf43a8-33fe-4676-8c87-01204929b469}",
                                "name": "Module Init",
                                "properties": {
                                    "icon": ":/vme_script.png"
                                },
                                "variable_table": {
                                    "name": "",
                                    "variables": {
                                    }
                                },
                                "vme_script": ""
                            }
                        ],
                        "name": "triva7_trigger_reset",
                        "type": "triva7_trigger_reset",
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vmeReadout": {
                            "enabled": true,
                            "id": "{8c1c8712-5b2b-45c3-9d00-ea55a581b10f}",
                            "name": "Module Readout",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "\nmarker 0x4040400a\nmarker 0x4040400b\nmarker 0x4040400c\n\n# reset trigger\nwrite A32 D32 0x0000 0x8030 # EV_IRQ_CLEAR | FC_PULSE | DT_CLEAR\n\n\n"
                        },
                        "vmeReset": {
                            "enabled": true,
                            "id": "{91100661-7d2d-46a0-886f-8f0302a82c18}",
                            "name": "Module Reset",
                            "properties": {
                                "icon": ":/vme_script.png"
                            },
                            "variable_table": {
                                "name": "",
                                "variables": {
                                }
                            },
                            "vme_script": "# Reset the module to a clean default state here. This is executed before\n# initializing the modules at DAQ start time.\n"
                        }
                    }
                ],
                "name": "event_6_hardware_trigegr_type_4",
                "scalerReadoutFrequency": 0,
                "scalerReadoutPeriod": 2,
                "triggerCondition": "Interrupt",
                "triggerOptions": {
                    "IRQUseIACK": false,
                    "mvlc.timer_base": "ms",
                    "mvlc.timer_period": 1000,
                    "sis3153.timer_period": 1
                },
                "variable_table": {
                    "name": "",
                    "variables": {
                        "mesy_eoe_marker": {
                            "comment": "EndOfEvent marker for mesytec modules (0: eventcounter, 1: timestamp, 3: extended_timestamp).",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "mesy_mcst": {
                            "comment": "The most significant byte of the 32-bit multicast address to be used by this event.",
                            "definitionLocation": "",
                            "value": "bf"
                        },
                        "mesy_readout_num_events": {
                            "comment": "Number of events to read out in each cycle.",
                            "definitionLocation": "",
                            "value": "1"
                        },
                        "sys_irq": {
                            "comment": "IRQ value set for the VME Controller for this event.",
                            "definitionLocation": "",
                            "value": "11"
                        }
                    }
                },
                "vme_scripts": {
                    "daq_start": {
                        "enabled": true,
                        "id": "{cb9e8df2-1240-44d6-b749-b33268dcda1a}",
                        "name": "DAQ Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Start the acquisition sequence for all modules via the events multicast address.\n#writeabs a32 d16 0x${mesy_mcst}00603a      0   # stop acq\n#writeabs a32 d16 0x${mesy_mcst}006090      3   # reset CTRA and CTRB\n#writeabs a32 d16 0x${mesy_mcst}00603c      1   # FIFO reset\n#writeabs a32 d16 0x${mesy_mcst}00603a      1   # start acq\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "daq_stop": {
                        "enabled": true,
                        "id": "{51bd8d38-0cc4-43b3-a18d-12f1b4cf8f00}",
                        "name": "DAQ Stop",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "#writeabs a32 d16 0x${mesy_mcst}00603a     0   # stop acquisition\n"
                    },
                    "readout_end": {
                        "enabled": true,
                        "id": "{03c7943e-83c9-4808-a66c-eeb55311edae}",
                        "name": "Cycle End",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the end of each readout cycle\n# Do a multicast write of the readout_reset register\n#writeabs a32 d16 0x${mesy_mcst}006034      1   # readout reset\n"
                    },
                    "readout_start": {
                        "enabled": true,
                        "id": "{c198d60e-1e99-4b79-9ad4-34d82cb57b1a}",
                        "name": "Cycle Start",
                        "properties": {
                            "icon": ":/vme_script.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "# Commands executed at the start of each readout cycle\n"
                    }
                }
            }
        ],
        "global_objects": {
            "children": [
                {
                    "class": "ContainerObject",
                    "data": {
                        "children": [
                        ],
                        "enabled": true,
                        "id": "{4d482a83-623e-4936-857a-3a8f1843f0df}",
                        "name": "daq_start",
                        "properties": {
                            "display_name": "DAQ Start",
                            "icon": ":/folder_orange.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        }
                    }
                },
                {
                    "class": "ContainerObject",
                    "data": {
                        "children": [
                        ],
                        "enabled": true,
                        "id": "{4588c1e0-2329-456f-9a27-5c9cbdcab8a8}",
                        "name": "daq_stop",
                        "properties": {
                            "display_name": "DAQ Stop",
                            "icon": ":/folder_orange.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        }
                    }
                },
                {
                    "class": "ContainerObject",
                    "data": {
                        "children": [
                            {
                                "class": "VMEScriptConfig",
                                "data": {
                                    "enabled": true,
                                    "id": "{95cfd04c-6c52-43d6-bd1d-711e1e2c0933}",
                                    "name": "triva trigger reset",
                                    "properties": {
                                        "icon": ":/vme_script.png"
                                    },
                                    "variable_table": {
                                        "name": "",
                                        "variables": {
                                        }
                                    },
                                    "vme_script": "# TRIVA 7, reset Trigger\nsetbase 0x02000000\nwrite A32 D32 0x0000 0x00008020 #= EV_IRQ_CLEAR | FC_PULSE | (DT_CLEAR 0x00000020); # Clear Trigger\n"
                                }
                            }
                        ],
                        "enabled": true,
                        "id": "{abeea069-a9a6-4b5e-89a1-2df232a297f6}",
                        "name": "manual",
                        "properties": {
                            "display_name": "Manual",
                            "icon": ":/folder_orange.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        }
                    }
                },
                {
                    "class": "VMEScriptConfig",
                    "data": {
                        "enabled": true,
                        "id": "{acca1c33-84ad-4760-b183-3c042189b673}",
                        "name": "mvlc_trigger_io",
                        "properties": {
                            "display_name": "MVLC Trigger/IO",
                            "icon": ":/vme_module.png"
                        },
                        "variable_table": {
                            "name": "",
                            "variables": {
                            }
                        },
                        "vme_script": "##############################################################\n# MVLC Trigger I/O  setup via internal VME interface         #\n##############################################################\n\n# Note: This file was generated by mvme. Editing existing\n# values is allowed and these changes will used by mvme\n# when next parsing the script. Changes to the basic\n# structure, like adding new write or read commands, are not\n# allowed. These changes will be lost the next time the file\n# is modified by mvme.\n\n# Internal MVLC VME interface address\nsetbase 0xffff0000\n\n# Level0 #####################################################\n\n# timer0\n0x0200 0x0000    # select L0.Unit0\n0x0302      2    # range (0:ns, 1:us, 2:ms, 3:s)\n0x0304      0    # delay [ns]\n0x0306    100    # period [in range units]\n\n# timer1\n0x0200 0x0001    # select L0.Unit1\n0x0302      0    # range (0:ns, 1:us, 2:ms, 3:s)\n0x0304      0    # delay [ns]\n0x0306      0    # period [in range units]\n\n# timer2\n0x0200 0x0002    # select L0.Unit2\n0x0302      0    # range (0:ns, 1:us, 2:ms, 3:s)\n0x0304      0    # delay [ns]\n0x0306      0    # period [in range units]\n\n# timer3\n0x0200 0x0003    # select L0.Unit3\n0x0302      0    # range (0:ns, 1:us, 2:ms, 3:s)\n0x0304      0    # delay [ns]\n0x0306      0    # period [in range units]\n\n# trigger_resource0\n0x0200 0x0004    # select L0.Unit4\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      3    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource1\n0x0200 0x0005    # select L0.Unit5\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300     14    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource2\n0x0200 0x0006    # select L0.Unit6\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300     13    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource3\n0x0200 0x0007    # select L0.Unit7\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      7    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource4\n0x0200 0x0008    # select L0.Unit8\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      8    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource5\n0x0200 0x0009    # select L0.Unit9\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      8    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource6\n0x0200 0x000a    # select L0.Unit10\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      7    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# trigger_resource7\n0x0200 0x000b    # select L0.Unit11\n0x0380      0    # type: 0=IRQ, 1=SoftTrigger, 2=SlaveTrigger\n0x0300      3    # irq_index (zero-based: 0: IRQ1, .., 6: IRQ7)\n0x0306      0    # slave_trigger: delay [ns]\n0x0308      0    # slave_trigger: width [ns]\n0x030a      0    # slave_trigger: holdoff [ns]\n0x030c      0    # slave_trigger: invert (start on trailing edge of input)\n0x0382      0    # slave trigger number (0..3)\n\n# stack_busy0\n0x0200 0x000c    # select L0.Unit12\n0x0300      4    # stack_index\n\n# stack_busy1\n0x0200 0x000d    # select L0.Unit13\n0x0300      5    # stack_index\n\n# NIM0\n0x0200 0x0010    # select L0.Unit16\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM1\n0x0200 0x0011    # select L0.Unit17\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM2\n0x0200 0x0012    # select L0.Unit18\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM3\n0x0200 0x0013    # select L0.Unit19\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM4\n0x0200 0x0014    # select L0.Unit20\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM5\n0x0200 0x0015    # select L0.Unit21\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM6\n0x0200 0x0016    # select L0.Unit22\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM7\n0x0200 0x0017    # select L0.Unit23\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM8\n0x0200 0x0018    # select L0.Unit24\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM9\n0x0200 0x0019    # select L0.Unit25\n0x0300      0    # delay [ns]\n0x0302    100    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      1    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM10\n0x0200 0x001a    # select L0.Unit26\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM11\n0x0200 0x001b    # select L0.Unit27\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM12\n0x0200 0x001c    # select L0.Unit28\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# NIM13\n0x0200 0x001d    # select L0.Unit29\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x030a      0    # direction (0:in, 1:out)\n0x0310      0    # output activate\n\n# IRQ1\n0x0200 0x0021    # select L0.Unit33\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# IRQ2\n0x0200 0x0022    # select L0.Unit34\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# IRQ3\n0x0200 0x0023    # select L0.Unit35\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# IRQ4\n0x0200 0x0024    # select L0.Unit36\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# IRQ5\n0x0200 0x0025    # select L0.Unit37\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# IRQ6\n0x0200 0x0026    # select L0.Unit38\n0x0300      0    # delay [ns]\n0x0302      0    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n\n# Level1 #####################################################\n\n# L1.LUT0\n0x0200 0x0100    # select L1.Unit0\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# L1.LUT1\n0x0200 0x0101    # select L1.Unit1\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# L1.LUT2\n0x0200 0x0102    # select L1.Unit2\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n0x0380      0    # connect input0 to 'NIM8'\n0x0382      0    # connect input1 to 'NIM9'\n0x0384      0    # connect input2 to 'NIM10'\n\n# L1.LUT3\n0x0200 0x0103    # select L1.Unit3\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# L1.LUT4\n0x0200 0x0104    # select L1.Unit4\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# L1.LUT5\n0x0200 0x0105    # select L1.Unit5\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# L1.LUT6\n0x0200 0x0106    # select L1.Unit6\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n\n# Level2 #####################################################\n\n# L2.LUT0\n0x0200 0x0200    # select L2.Unit0\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n0x0320 0b0000    # strobed_outputs\n0x0380     14    # connect input0 to 'mdpp_trig'\n0x0382      0    # connect input1 to 'scaler_timer'\n0x0384      4    # connect input2 to 'irq4'\n\n# L2.LUT0 strobe gate generator\n0x0332      0    # delay [ns]\n0x0334      8    # width [ns]\n0x0336      0    # holdoff [ns]\n0x0338      0    # invert (start on trailing edge of input)\n0x0386      0    # connect strobe_input to 'scaler_timer'\n\n# L2.LUT1\n0x0200 0x0201    # select L2.Unit1\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n0x0320 0b0000    # strobed_outputs\n0x0380      6    # connect input0 to 'irq14'\n0x0382      5    # connect input1 to 'irq15'\n0x0384      7    # connect input2 to 'irq8'\n\n# L2.LUT1 strobe gate generator\n0x0332      0    # delay [ns]\n0x0334      8    # width [ns]\n0x0336      0    # holdoff [ns]\n0x0338      0    # invert (start on trailing edge of input)\n0x0386      0    # connect strobe_input to 'scaler_timer'\n\n# L2.LUT2\n0x0200 0x0202    # select L2.Unit2\n0x0300 0x0000    # cells 0-3\n0x0302 0x0000    # cells 4-7\n0x0304 0x0000    # cells 8-11\n0x0306 0x0000    # cells 12-15\n0x0308 0x0000    # cells 16-19\n0x030a 0x0000    # cells 20-23\n0x030c 0x0000    # cells 24-27\n0x030e 0x0000    # cells 28-31\n0x0310 0x0000    # cells 32-35\n0x0312 0x0000    # cells 36-39\n0x0314 0x0000    # cells 40-43\n0x0316 0x0000    # cells 44-47\n0x0318 0x0000    # cells 48-51\n0x031a 0x0000    # cells 52-55\n0x031c 0x0000    # cells 56-59\n0x031e 0x0000    # cells 60-63\n0x0320 0b0000    # strobed_outputs\n0x0380      8    # connect input0 to 'irq9'\n0x0382      8    # connect input1 to 'irq9'\n0x0384      0    # connect input2 to 'scaler_timer'\n\n# L2.LUT2 strobe gate generator\n0x0332      0    # delay [ns]\n0x0334      8    # width [ns]\n0x0336      0    # holdoff [ns]\n0x0338      0    # invert (start on trailing edge of input)\n0x0386      0    # connect strobe_input to 'scaler_timer'\n\n# Level3 #####################################################\n\n# StackStart0\n0x0200 0x0300    # select L3.Unit0\n0x0300      0    # activate\n0x0302      0    # stack index\n0x0304      0    # delay [ns]\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# StackStart1\n0x0200 0x0301    # select L3.Unit1\n0x0300      0    # activate\n0x0302      0    # stack index\n0x0304      0    # delay [ns]\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# StackStart2\n0x0200 0x0302    # select L3.Unit2\n0x0300      0    # activate\n0x0302      0    # stack index\n0x0304      0    # delay [ns]\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# StackStart3\n0x0200 0x0303    # select L3.Unit3\n0x0300      0    # activate\n0x0302      0    # stack index\n0x0304      0    # delay [ns]\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# MasterTrigger0\n0x0200 0x0304    # select L3.Unit4\n0x0300      0    # activate\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# MasterTrigger1\n0x0200 0x0305    # select L3.Unit5\n0x0300      0    # activate\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# MasterTrigger2\n0x0200 0x0306    # select L3.Unit6\n0x0300      0    # activate\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# MasterTrigger3\n0x0200 0x0307    # select L3.Unit7\n0x0300      0    # activate\n0x0380      0    # connect input0 to 'scaler_timer'\n\n# Counter0+Timestamper\n0x0200 0x0308    # select L3.Unit8\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter1\n0x0200 0x0309    # select L3.Unit9\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter2\n0x0200 0x030a    # select L3.Unit10\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter3\n0x0200 0x030b    # select L3.Unit11\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter4\n0x0200 0x030c    # select L3.Unit12\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter5\n0x0200 0x030d    # select L3.Unit13\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter6\n0x0200 0x030e    # select L3.Unit14\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# Counter7\n0x0200 0x030f    # select L3.Unit15\n0x030e      0    # clear on latch\n0x0380      0    # connect input0 to 'scaler_timer'\n0x0382     21    # connect input1 to '<not connected>'\n\n# NIM unit connections (Note: NIM setup is done in the Level0 section)\n\n# NIM0\n0x0200 0x0310    # select L3.Unit16\n0x0380      2    # connect input0 to 'irq4'\n\n# NIM1\n0x0200 0x0311    # select L3.Unit17\n0x0380      3    # connect input0 to 'irq14'\n\n# NIM2\n0x0200 0x0312    # select L3.Unit18\n0x0380      4    # connect input0 to 'irq15'\n\n# NIM3\n0x0200 0x0313    # select L3.Unit19\n0x0380      5    # connect input0 to 'irq8'\n\n# NIM4\n0x0200 0x0314    # select L3.Unit20\n0x0380      6    # connect input0 to 'irq9'\n\n# NIM5\n0x0200 0x0315    # select L3.Unit21\n0x0380      7    # connect input0 to 'L2.LUT2.OUT1'\n\n# NIM6\n0x0200 0x0316    # select L3.Unit22\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM7\n0x0200 0x0317    # select L3.Unit23\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM8\n0x0200 0x0318    # select L3.Unit24\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM9\n0x0200 0x0319    # select L3.Unit25\n0x0380      8    # connect input0 to 'L2.LUT2.OUT2'\n\n# NIM10\n0x0200 0x031a    # select L3.Unit26\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM11\n0x0200 0x031b    # select L3.Unit27\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM12\n0x0200 0x031c    # select L3.Unit28\n0x0380      0    # connect input0 to 'data_trig'\n\n# NIM13\n0x0200 0x031d    # select L3.Unit29\n0x0380      0    # connect input0 to 'data_trig'\n\n# LVDS0\n0x0200 0x031e    # select L3.Unit30\n0x0300      0    # delay [ns]\n0x0302    100    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x0310      0    # output activate\n0x0380      0    # connect input0 to 'data_trig'\n\n# LVDS1\n0x0200 0x031f    # select L3.Unit31\n0x0300      0    # delay [ns]\n0x0302    100    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x0310      0    # output activate\n0x0380      1    # connect input0 to 'scaler_trig'\n\n# LVDS2\n0x0200 0x0320    # select L3.Unit32\n0x0300      0    # delay [ns]\n0x0302    100    # width [ns]\n0x0304      0    # holdoff [ns]\n0x0306      0    # invert (start on trailing edge of input)\n0x0310      0    # output activate\n0x0380      0    # connect input0 to 'data_trig'\n\n##############################################################\n# MVLC Trigger I/O specific meta information                 #\n##############################################################\nmeta_block_begin mvlc_trigger_io\nnames:\n  level0:\n    0: scaler_timer\n    1: timer1\n    2: timer2\n    3: timer3\n    4: irq4\n    5: irq15\n    6: irq14\n    7: irq8\n    8: irq9\n    9: trigger_resource5\n    10: trigger_resource6\n    11: trigger_resource7\n    12: stack_busy0\n    13: stack_busy1\n    14: sysclk\n    15: daq_start\n    16: mon_master_irq\n    17: mon_start_irq\n    18: mon_stop_irq\n    19: mon_data_irq\n    20: mon_scaler_irq\n    21: NIM5\n    22: NIM6\n    23: NIM7\n    24: NIM8\n    25: NIM9\n    26: NIM10\n    27: NIM11\n    28: NIM12\n    29: mdpp_trig_in\n    30: <unused>\n    31: <unused>\n    32: <unused>\n    33: IRQ1\n    34: IRQ2\n    35: IRQ3\n    36: IRQ4\n    37: IRQ5\n    38: IRQ6\n  level1:\n    0:\n      0: L1.LUT0.OUT0\n      1: L1.LUT0.OUT1\n      2: L1.LUT0.OUT2\n    1:\n      0: L1.LUT1.OUT0\n      1: L1.LUT1.OUT1\n      2: L1.LUT1.OUT2\n    2:\n      0: mdpp_trig\n      1: L1.LUT2.OUT1\n      2: L1.LUT2.OUT2\n    3:\n      0: L1.LUT3.OUT0\n      1: L1.LUT3.OUT1\n      2: L1.LUT3.OUT2\n    4:\n      0: mdpp_trig\n      1: L1.LUT4.OUT1\n      2: L1.LUT4.OUT2\n    5:\n      0: L1.LUT5.OUT0\n      1: L1.LUT5.OUT1\n      2: L1.LUT5.OUT2\n    6:\n      0: L1.LUT6.OUT0\n      1: L1.LUT6.OUT1\n      2: L1.LUT6.OUT2\n  level2:\n    0:\n      0: data_trig\n      1: scaler_trig\n      2: irq4\n    1:\n      0: irq14\n      1: irq15\n      2: irq8\n    2:\n      0: irq9\n      1: L2.LUT2.OUT1\n      2: L2.LUT2.OUT2\n  level3:\n    0: StackStart0\n    1: StackStart1\n    2: StackStart2\n    3: StackStart3\n    4: MasterTrigger0\n    5: MasterTrigger1\n    6: MasterTrigger2\n    7: MasterTrigger3\n    8: Counter0+Timestamper\n    9: Counter1\n    10: Counter2\n    11: Counter3\n    12: Counter4\n    13: Counter5\n    14: Counter6\n    15: Counter7\n    30: triva_t1\n    31: triva_t2\n    32: triva_t3\n    33: <not connected>\nsettings:\n  level0:\n    0:\n      soft_activate: false\n    1:\n      soft_activate: false\n    2:\n      soft_activate: false\n    3:\n      soft_activate: false\n  level3:\n    8:\n      soft_activate: false\n    9:\n      soft_activate: false\n    10:\n      soft_activate: false\n    11:\n      soft_activate: false\n    12:\n      soft_activate: false\n    13:\n      soft_activate: false\n    14:\n      soft_activate: false\n    15:\n      soft_activate: false\nmeta_block_end"
                    }
                }
            ],
            "enabled": true,
            "id": "{97940f33-7877-4d64-9d6e-d98ba8a80148}",
            "name": "global_objects",
            "properties": {
                "display_name": "Global Objects",
                "icon": ":/vme_global_scripts.png"
            },
            "variable_table": {
                "name": "",
                "variables": {
                }
            }
        },
        "id": "{aae431f4-78a4-495c-827e-b3302e26ac8f}",
        "name": "",
        "properties": {
            "version": 4
        },
        "variable_table": {
            "name": "",
            "variables": {
            }
        },
        "vme_controller": {
            "settings": {
                "method": "first",
                "mvlc_eth_enable_jumbos": false,
                "mvlc_hostname": "MVLC-0066."
            },
            "type": "MVLC_USB"
        }
    }
}
